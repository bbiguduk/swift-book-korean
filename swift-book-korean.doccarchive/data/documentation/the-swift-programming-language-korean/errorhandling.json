{"sections":[],"abstract":[{"type":"text","text":"에러에 응답하고 복구합니다."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tsplk\/documentation\/The-Swift-Programming-Language-Korean\/ErrorHandling"},"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/org.swift.tsplk\/documentation\/TSPLK"]]},"kind":"article","metadata":{"title":"에러 처리 (Error Handling)"},"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"에러 처리 (Error handling)"}],"type":"emphasis"},{"text":" 는 프로그램의 에러 조건에서 응답하고 복구하는 프로세스 입니다. Swift는 런타임에 복구 가능한 에러를 던지고 포착하고 전파하고 조작하기 위한 최고 수준의 지원을 제공합니다.","type":"text"}]},{"inlineContent":[{"type":"text","text":"일부 작업은 항상 실행을 완료하거나 유용한 출력을 생성한다고 보장되지 않습니다. 옵셔널은 값이 없음을 나타내는데 사용되지만 작업이 실패할 경우 코드가 그에 따라 응답할 수 있도록 에러의 원인을 이해하는 것이 유용한 경우가 많습니다."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"예를 들어 디스크의 파일에서 데이터를 읽고 처리하는 작업을 생각해 봅시다. 지정된 위치에 파일이 존재하지 않거나 파일에 읽기 권한이 없거나 적절한 형식으로 인코딩 되지 않는 것을 포함하여 작업이 실패할 수 있는 많은 방법이 있습니다. 이러한 다른 상황을 구분하면 프로그램에서 일부 에러를 해결하고 해결할 수 없는 에러를 전달할 수 있습니다."}],"type":"paragraph"},{"content":[{"inlineContent":[{"text":"Note","type":"text"},{"type":"text","text":"\n"},{"text":"Swift에서 에러 처리는 Cocoa와 Objective-C에 ","type":"text"},{"code":"NSError","type":"codeVoice"},{"text":" 를 사용하는 에러 처리 패턴과 상호 운용됩니다. 더많은 정보는 ","type":"text"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/cocoa_design_patterns\/handling_cocoa_errors_in_swift","isActive":true},{"type":"text","text":" 를 참고 바랍니다."}],"type":"paragraph"}],"style":"note","type":"aside","name":"Note"},{"anchor":"%EC%97%90%EB%9F%AC-%ED%91%9C%ED%98%84%EA%B3%BC-%EB%8D%98%EC%A7%80%EA%B8%B0-Representing-and-Throwing-Errors","text":"에러 표현과 던지기 (Representing and Throwing Errors)","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift에서 에러는 "},{"type":"codeVoice","code":"Error"},{"type":"text","text":" 프로토콜에 준수하는 타입의 값으로 표현됩니다. 이 빈 프로토콜은 에러를 처리하는 것에 대해 사용될 수 있음을 나타냅니다."}]},{"inlineContent":[{"type":"text","text":"Swift 열거형은 관련된 에러 조건의 그룹을 모델링하는데 특히 적합하며 관련값을 사용하여 에러의 특성에 대한 추가 정보를 전달할 수 있습니다. 예를 들어 다음은 게임 내에서 자동 판매기를 작동하는 에러 조건을 나타내는 방법입니다:"}],"type":"paragraph"},{"syntax":"swift","code":["enum VendingMachineError: Error {","    case invalidSelection","    case insufficientFunds(coinsNeeded: Int)","    case outOfStock","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"에러가 발생하면 예상치 못한 일이 발생하여 정상적인 흐름을 계속할 수 없음을 나타낼 수 있습니다. "},{"type":"codeVoice","code":"throw"},{"text":" 구문을 사용하여 에러를 발생 시킵니다. 예를 들어 아래의 코드는 자동 판매기에 5개의 코인이 더 필요하다고 에러를 발생 시킵니다:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["throw VendingMachineError.insufficientFunds(coinsNeeded: 5)"]},{"text":"에러 처리 (Handling Errors)","type":"heading","level":2,"anchor":"%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC-Handling-Errors"},{"type":"paragraph","inlineContent":[{"text":"에러가 발생할 때 주변 코드의 부분이 에러 처리를 담당해야 합니다. 예를 들어 문제를 수정하거나 다른 방법을 시도하거나 사용자에게 에러를 알리는 방법으로 에러를 처리해야 합니다.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Swift에서는 에러를 처리하는 4가지 방법이 있습니다. 함수에서 해당 함수를 호출하는 코드로 에러를 전파하거나 ","type":"text"},{"code":"do","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"catch"},{"text":" 구문을 사용하거나 옵셔널 값으로 에러를 처리하거나 에러가 발생하지 않을 것이라고 주장할 수 있습니다. 각 접근은 아래에 설명되어 있습니다.","type":"text"}]},{"inlineContent":[{"text":"함수에서 에러가 발생하면 프로그램의 흐름이 변경되므로 코드에서 에러가 발생할 수 있는 위치를 신속하게 알 수 있어야 합니다. 코드에서 이러한 위치를 식별하려면 에러가 발생할 수 있는 함수, 메서드, 또는 초기화 구문을 호출하는 코드 이전에 ","type":"text"},{"code":"try","type":"codeVoice"},{"type":"text","text":" 또는 "},{"type":"codeVoice","code":"try?"},{"type":"text","text":" 또는 "},{"code":"try!","type":"codeVoice"},{"type":"text","text":" 키워드를 작성합니다. 이 키워드는 아래에 설명되어 있습니다."}],"type":"paragraph"},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Note","type":"text"},{"type":"text","text":"\n"},{"text":"Swift에서 에러 처리는 ","type":"text"},{"code":"try","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" 그리고 "},{"code":"throw","type":"codeVoice"},{"type":"text","text":" 키워드를 사용하는 다른 언어에서 에러 처리와 유사합니다. Objective-C를 포함하여 많은 언어에서의 예외 처리와 달리 Swift에서 에러 처리는 계산 비용이 많이 드는 프로세스 인 호출 스택 해제가 포함되지 않습니다. 따라서 "},{"code":"throw","type":"codeVoice"},{"text":" 구문의 성능 특성은 ","type":"text"},{"type":"codeVoice","code":"return"},{"text":" 구문의 성능 특성과 비슷합니다.","type":"text"}]}],"name":"Note"},{"anchor":"%EB%8D%98%EC%A7%80%EA%B8%B0-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%97%90%EB%9F%AC-%EC%A0%84%ED%8C%8C-Propagating-Errors-Using-Throwing-Functions","text":"던지기 함수를 이용한 에러 전파 (Propagating Errors Using Throwing Functions)","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"에러가 발생할 수 있는 함수, 메서드, 또는 초기화 구문을 나타내기 위해 함수의 선언 중 파라미터 뒤에 ","type":"text"},{"code":"throws","type":"codeVoice"},{"type":"text","text":" 키워드를 작성합니다. "},{"code":"throws","type":"codeVoice"},{"type":"text","text":" 로 표시된 함수는 "},{"inlineContent":[{"type":"text","text":"던지기 함수"}],"type":"emphasis"},{"type":"text","text":" 라고 합니다. 함수에 반환 타입이 지정되어 있으면 "},{"type":"codeVoice","code":"throws"},{"type":"text","text":" 키워드는 반환 화살표 ("},{"code":"->","type":"codeVoice"},{"text":") 전에 작성합니다.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func canThrowErrors() throws -> String","","func cannotThrowErrors() -> String"]},{"type":"paragraph","inlineContent":[{"text":"던지기 함수는 내부에서 발생한 에러를 호출된 범위로 전파합니다.","type":"text"}]},{"name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"Note","type":"text"},{"text":"\n","type":"text"},{"type":"text","text":"던지기 함수는 에러를 전파만 할 수 있습니다. 던지기 선언이 되지 않은 함수 내에서 발생된 모든 에러는 함수 내에서 처리되어야 합니다."}]}],"type":"aside"},{"inlineContent":[{"type":"text","text":"아래 예제에서 "},{"type":"codeVoice","code":"VendingMachine"},{"type":"text","text":" 클래스는 요청된 항목이 불가능 하거나 품절이거나 현재 입금액을 초과하는 비용이 있는 경우 적절한 "},{"type":"codeVoice","code":"VendingMachineError"},{"type":"text","text":" 를 발생하는 "},{"type":"codeVoice","code":"vend(itemNamed:)"},{"text":" 메서드를 가지고 있습니다:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct Item {","    var price: Int","    var count: Int","}","","class VendingMachine {","    var inventory = [","        \"Candy Bar\": Item(price: 12, count: 7),","        \"Chips\": Item(price: 10, count: 4),","        \"Pretzels\": Item(price: 7, count: 11)","    ]","    var coinsDeposited = 0","","    func vend(itemNamed name: String) throws {","        guard let item = inventory[name] else {","            throw VendingMachineError.invalidSelection","        }","","        guard item.count > 0 else {","            throw VendingMachineError.outOfStock","        }","","        guard item.price <= coinsDeposited else {","            throw VendingMachineError.insufficientFunds(coinsNeeded: item.price - coinsDeposited)","        }","","        coinsDeposited -= item.price","","        var newItem = item","        newItem.count -= 1","        inventory[name] = newItem","","        print(\"Dispensing \\(name)\")","    }","}"]},{"type":"paragraph","inlineContent":[{"code":"vend(itemNamed:)","type":"codeVoice"},{"type":"text","text":" 메서드의 구현은 "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" 구문을 사용하여 메서드를 일찍 종료시키고 스낵 구매 요구사항 중 하나라도 충족하지 않으면 적절한 에러를 발생합니다. "},{"code":"throw","type":"codeVoice"},{"type":"text","text":" 구문은 프로그램 제어를 즉시 전달하므로 항목은 요구사항이 모두 만족해야만 판매됩니다."}]},{"inlineContent":[{"code":"vend(itemNamed:)","type":"codeVoice"},{"type":"text","text":" 메서드는 발생하는 에러를 전파하기 때문에 이 메서드를 호출하는 코드는 "},{"code":"do","type":"codeVoice"},{"type":"text","text":"-"},{"code":"catch","type":"codeVoice"},{"text":" 구문, ","type":"text"},{"type":"codeVoice","code":"try?"},{"text":" 또는 ","type":"text"},{"type":"codeVoice","code":"try!"},{"type":"text","text":" 를 사용하여 에러를 처리하거나 계속 전파해야 합니다. 예를 들어 아래 예제에서 "},{"code":"buyFavoriteSnack(person:vendingMachine:)","type":"codeVoice"},{"type":"text","text":" 은 던지기 함수이며 "},{"code":"vend(itemNamed:)","type":"codeVoice"},{"type":"text","text":" 메서드에서 발생한 에러는 "},{"type":"codeVoice","code":"buyFavoriteSnack(person:vendingMachine:)"},{"type":"text","text":" 함수가 호출된 지점까지 전파될 것입니다."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let favoriteSnacks = [","    \"Alice\": \"Chips\",","    \"Bob\": \"Licorice\",","    \"Eve\": \"Pretzels\",","]","func buyFavoriteSnack(person: String, vendingMachine: VendingMachine) throws {","    let snackName = favoriteSnacks[person] ?? \"Candy Bar\"","    try vendingMachine.vend(itemNamed: snackName)","}"]},{"type":"paragraph","inlineContent":[{"text":"이 예제에서 ","type":"text"},{"type":"codeVoice","code":"buyFavoriteSnack(person:vendingMachine:)"},{"text":" 함수는 주어진 사람의 좋아하는 스낵을 검색하고 ","type":"text"},{"type":"codeVoice","code":"vend(itemNamed:)"},{"type":"text","text":" 메서드를 호출하여 그 제품을 구입합니다. "},{"code":"vend(itemNamed:)","type":"codeVoice"},{"text":" 메서드는 에러를 발생할 수 있으므로 ","type":"text"},{"code":"try","type":"codeVoice"},{"type":"text","text":" 키워드를 앞에 두어 호출됩니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"던지기 초기화 구문은 던지기 함수와 같은 방법으로 에러를 전파할 수 있습니다. 예를 들어 아래의 리스트에서 "},{"code":"PurchasedSnack","type":"codeVoice"},{"text":" 구조체의 초기화 구문은 초기화 프로세스 부분으로 던지기 함수를 호출하고 발생하는 모든 에러를 호출자에게 전파하여 처리합니다.","type":"text"}]},{"syntax":"swift","code":["struct PurchasedSnack {","    let name: String","    init(name: String, vendingMachine: VendingMachine) throws {","        try vendingMachine.vend(itemNamed: name)","        self.name = name","    }","}"],"type":"codeListing"},{"level":3,"anchor":"Do-Catch-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC-Handling-Errors-Using-Do-Catch","text":"Do-Catch 사용하여 에러 처리 (Handling Errors Using Do-Catch)","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"do"},{"text":"-","type":"text"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" 구문을 사용하여 코드의 블럭을 실행하여 에러를 처리합니다. 에러가 "},{"code":"do","type":"codeVoice"},{"text":" 절에서 발생되면 ","type":"text"},{"code":"catch","type":"codeVoice"},{"type":"text","text":" 절과 비교하여 에러를 처리할 수 있는 항목을 결정합니다."}]},{"inlineContent":[{"text":"다음은 ","type":"text"},{"code":"do","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" 구문의 일반적인 형태입니다:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["do {","    try <#expression#>","    <#statements#>","} catch <#pattern 1#> {","    <#statements#>","} catch <#pattern 2#> where <#condition#> {","    <#statements#>","} catch <#pattern 3#>, <#pattern 4#> where <#condition#> {","    <#statements#>","} catch {","    <#statements#>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"처리할 수 있는 에러가 무엇인지 나타내기 위해 "},{"code":"catch","type":"codeVoice"},{"text":" 뒤에 패턴을 작성합니다. ","type":"text"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" 절이 패턴을 가지고 있지 않다면 이 절은 모든 에러와 일치하고 "},{"code":"error","type":"codeVoice"},{"text":" 라는 이름을 가진 지역 상수로 에러를 바인드 합니다. 자세한 내용은 ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tsplk\/documentation\/The-Swift-Programming-Language-Korean\/Patterns"},{"text":" 을 참고 바랍니다.","type":"text"}]},{"inlineContent":[{"text":"예를 들어 다음 코드는 ","type":"text"},{"type":"codeVoice","code":"VendingMachineError"},{"type":"text","text":" 열거형에 3가지 모든 케이스에 대해 일치합니다."}],"type":"paragraph"},{"type":"codeListing","code":["var vendingMachine = VendingMachine()","vendingMachine.coinsDeposited = 8","do {","    try buyFavoriteSnack(person: \"Alice\", vendingMachine: vendingMachine)","    print(\"Success! Yum.\")","} catch VendingMachineError.invalidSelection {","    print(\"Invalid Selection.\")","} catch VendingMachineError.outOfStock {","    print(\"Out of Stock.\")","} catch VendingMachineError.insufficientFunds(let coinsNeeded) {","    print(\"Insufficient funds. Please insert an additional \\(coinsNeeded) coins.\")","} catch {","    print(\"Unexpected error: \\(error).\")","}","\/\/ Prints \"Insufficient funds. Please insert an additional 2 coins.\""],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"위의 예제에서 "},{"type":"codeVoice","code":"buyFavoriteSnack(person:vendingMachine:)"},{"text":" 함수는 에러를 발생할 수 있으므로 ","type":"text"},{"code":"try","type":"codeVoice"},{"type":"text","text":" 표현식으로 호출됩니다. 에러가 발생하면 실행이 즉시 "},{"type":"codeVoice","code":"catch"},{"text":" 절로 전송되어 전파가 계속 될 것인지 여부를 결정합니다. 패턴이 일치하지 않으면 에러는 마지막 ","type":"text"},{"type":"codeVoice","code":"catch"},{"text":" 절에 의해 포착되고 지역 ","type":"text"},{"type":"codeVoice","code":"error"},{"type":"text","text":" 상수에 바인딩 됩니다. 에러가 발생하지 않으면 "},{"code":"do","type":"codeVoice"},{"text":" 구문에 나머지 구문이 실행됩니다.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"catch"},{"type":"text","text":" 절은 "},{"code":"do","type":"codeVoice"},{"type":"text","text":" 절에서 발생할 수 있는 모든 에러를 처리할 필요는 없습니다. "},{"code":"catch","type":"codeVoice"},{"type":"text","text":" 절이 에러를 처리하지 않으면 에러는 주변에 전파합니다. 그러나 전파된 에러는 "},{"type":"emphasis","inlineContent":[{"text":"일부","type":"text"}]},{"text":" 주변 범위에서 처리되어야 합니다. 던지지 않는 함수에서는 ","type":"text"},{"code":"do","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" 구문에서 에러를 처리해야 합니다. 던지는 함수에서는 "},{"type":"codeVoice","code":"do"},{"text":"-","type":"text"},{"code":"catch","type":"codeVoice"},{"type":"text","text":" 구문이나 호출자가 에러를 처리해야 합니다. 에러가 처리되지 않고 범위의 최상위로 전파되면 런타임 에러를 발생합니다."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"예를 들어 위의 예제는 "},{"type":"codeVoice","code":"VendingMachineError"},{"text":" 가 아닌 모든 에러가 호출 함수에서 포착되도록 작성할 수 있습니다:","type":"text"}]},{"type":"codeListing","code":["func nourish(with item: String) throws {","    do {","        try vendingMachine.vend(itemNamed: item)","    } catch is VendingMachineError {","        print(\"Couldn't buy that from the vending machine.\")","    }","}","","do {","    try nourish(with: \"Beet-Flavored Chips\")","} catch {","    print(\"Unexpected non-vending-machine-related error: \\(error)\")","}","\/\/ Prints \"Couldn't buy that from the vending machine.\""],"syntax":"swift"},{"inlineContent":[{"type":"codeVoice","code":"nourish(with:)"},{"type":"text","text":" 함수에서 "},{"type":"codeVoice","code":"vend(itemNamed:)"},{"text":" 가 ","type":"text"},{"code":"VendingMachineError","type":"codeVoice"},{"text":" 열거형에 케이스 중 하나의 에러를 발생하면 ","type":"text"},{"code":"nourish(with:)","type":"codeVoice"},{"type":"text","text":" 는 메세지를 출력하여 에러를 처리합니다. 그렇지 않으면 "},{"code":"nourish(with:)","type":"codeVoice"},{"type":"text","text":" 는 호출 부분으로 에러를 전파합니다. 이 에러는 일반적인 "},{"code":"catch","type":"codeVoice"},{"text":" 절에 의해 포착됩니다.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"연관된 에러를 포착하기 위한 다른 방법은 콤마로 구분하여 ","type":"text"},{"code":"catch","type":"codeVoice"},{"text":" 다음에 리스트 형식으로 작성하는 것입니다. 예를 들어:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func eat(item: String) throws {","    do {","        try vendingMachine.vend(itemNamed: item)","    } catch VendingMachineError.invalidSelection, VendingMachineError.insufficientFunds, VendingMachineError.outOfStock {","        print(\"Invalid selection, out of stock, or not enough money.\")","    }","}"]},{"type":"paragraph","inlineContent":[{"code":"eat(item:)","type":"codeVoice"},{"text":" 함수는 포착할 자동 판매기 에러를 나열하며 에러 텍스트는 해당 리스트의 항목에 해당합니다. 리스트화 된 3가지 에러 중 어떤 에러가 발생하면 이 ","type":"text"},{"code":"catch","type":"codeVoice"},{"text":" 절은 메세지를 출력하여 처리합니다. 나중에 추가될 수 있는 에러를 포함하여 다른 에러는 주변 범위로 전파됩니다.","type":"text"}]},{"text":"에러를 옵셔널 값을 변환 (Converting Errors to Optional Values)","level":3,"anchor":"%EC%97%90%EB%9F%AC%EB%A5%BC-%EC%98%B5%EC%85%94%EB%84%90-%EA%B0%92%EC%9D%84-%EB%B3%80%ED%99%98-Converting-Errors-to-Optional-Values","type":"heading"},{"inlineContent":[{"type":"text","text":"에러를 옵셔널 값으로 변환하여 처리하기 위해 "},{"type":"codeVoice","code":"try?"},{"text":" 를 사용합니다. ","type":"text"},{"code":"try?","type":"codeVoice"},{"text":" 표현식을 평가하는 동안 에러가 발생되면 이 표현식의 값은 ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" 입니다. 예를 들어 아래 코드에서 "},{"type":"codeVoice","code":"x"},{"text":" 와 ","type":"text"},{"type":"codeVoice","code":"y"},{"type":"text","text":" 는 같은 값을 가지고 동작합니다:"}],"type":"paragraph"},{"type":"codeListing","code":["func someThrowingFunction() throws -> Int {","    \/\/ ...","}","","let x = try? someThrowingFunction()","","let y: Int?","do {","    y = try someThrowingFunction()","} catch {","    y = nil","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"code":"someThrowingFunction()","type":"codeVoice"},{"type":"text","text":" 이 에러를 발생하면 "},{"code":"x","type":"codeVoice"},{"text":" 와 ","type":"text"},{"type":"codeVoice","code":"y"},{"type":"text","text":" 의 값은 "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" 입니다. 그렇지 않으면 "},{"code":"x","type":"codeVoice"},{"type":"text","text":" 와 "},{"type":"codeVoice","code":"y"},{"type":"text","text":" 의 값은 반환된 함수 값입니다. "},{"type":"codeVoice","code":"x"},{"type":"text","text":" 와 "},{"type":"codeVoice","code":"y"},{"type":"text","text":" 는 "},{"type":"codeVoice","code":"someThrowingFunction()"},{"type":"text","text":" 이 반환하는 타입의 옵셔널 입니다. 여기서 함수는 정수를 반환하므로 "},{"type":"codeVoice","code":"x"},{"text":" 와 ","type":"text"},{"type":"codeVoice","code":"y"},{"type":"text","text":" 는 옵셔널 정수입니다."}]},{"type":"paragraph","inlineContent":[{"code":"try?","type":"codeVoice"},{"type":"text","text":" 를 사용하면 모든 에러를 같은 방식으로 처리하려는 경우 간결한 에러 처리 코드를 작성할 수 있습니다. 예를 들어 아래의 코드는 여러 접근방식을 사용하여 데이터를 가져오거나 모든 접근방식이 실패하면 "},{"code":"nil","type":"codeVoice"},{"text":" 을 반환합니다.","type":"text"}]},{"syntax":"swift","code":["func fetchData() -> Data? {","    if let data = try? fetchDataFromDisk() { return data }","    if let data = try? fetchDataFromServer() { return data }","    return nil","}"],"type":"codeListing"},{"type":"heading","anchor":"%EC%97%90%EB%9F%AC-%EC%A0%84%ED%8C%8C-%EB%B9%84%ED%99%9C%EC%84%B1%ED%99%94-Disabling-Error-Propagation","level":3,"text":"에러 전파 비활성화 (Disabling Error Propagation)"},{"type":"paragraph","inlineContent":[{"type":"text","text":"가끔 던지는 함수 또는 메서드가 실제로 런타임 에러를 발생하지 않는다는 사실을 알고 있습니다. 이러한 경우 표현식 전에 에러 전파를 비활성화 하기 위해 "},{"type":"codeVoice","code":"try!"},{"text":" 를 작성할 수 있고 에러를 발생하지 않는다고 호출을 래핑할 수 있습니다. 에러가 발생한다면 런타임 에러가 발생합니다.","type":"text"}]},{"inlineContent":[{"text":"예를 들어 다음의 코드는 주어진 경로의 이미지를 로드하거나 이미지를 로드할 수 없을 때는 에러를 발생하는 ","type":"text"},{"type":"codeVoice","code":"loadImage(atPath:)"},{"type":"text","text":" 함수를 사용합니다. 이러한 경우 이미지는 이미지는 애플리케이션과 함께 제공되고 런타임에 에러가 발생하지 않으므로 에러 전파를 비활성화 하는 것이 적절합니다."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let photo = try! loadImage(atPath: \".\/Resources\/John Appleseed.jpg\")"]},{"text":"에러 타입 지정 (Specifying the Error Type)","type":"heading","level":2,"anchor":"%EC%97%90%EB%9F%AC-%ED%83%80%EC%9E%85-%EC%A7%80%EC%A0%95-Specifying-the-Error-Type"},{"inlineContent":[{"text":"위에 모든 예제에서 사용하는 에러 처리의 방법에서","type":"text"},{"type":"text","text":" "},{"type":"text","text":"에러는"},{"type":"text","text":" "},{"type":"codeVoice","code":"Error"},{"text":" 프로토콜을 준수하는 타입의 값입니다.","type":"text"},{"text":" ","type":"text"},{"text":"이러한 접근방식은","type":"text"},{"type":"text","text":" "},{"type":"text","text":"코드가 실행되는 동안 발생하는 모든 오류와"},{"text":" ","type":"text"},{"text":"다른 곳에서 전파된 에러에 대해","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"미리 알 수 없습니다."},{"text":" ","type":"text"},{"type":"text","text":"이것은 오류가 시간이 지남에 따라 변할 수 있음을 나타냅니다."},{"text":" ","type":"text"},{"text":"의존성을 사용하는 라이브러리를 포함하여","type":"text"},{"type":"text","text":" "},{"text":"새로운 라이브러리는","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"새로운 에러를 던질 수 있고,"},{"text":" ","type":"text"},{"text":"개발 또는 테스트 중에 보여지지 않는 실패 모드를 나타낼 수 있습니다.","type":"text"},{"text":" ","type":"text"},{"text":"위의 예제에서 에러를 처리하는 코드는","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"특정 "},{"code":"catch","type":"codeVoice"},{"text":" 구문이 없는","type":"text"},{"type":"text","text":" "},{"type":"text","text":"에러 처리를 위해 기본 케이스를 포함합니다."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"대부분의 Swift 코드는 던지는 에러에 대해 타입을 지정하지 않습니다."},{"text":" ","type":"text"},{"type":"text","text":"그러나,"},{"text":" ","type":"text"},{"text":"다음과 같은 특별한 경우에","type":"text"},{"type":"text","text":" "},{"type":"text","text":"특정 타입의 에러로 제한할 수 있습니다:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"동적 메모리 할당을 지원하지 않는"},{"type":"text","text":" "},{"type":"text","text":"임베디드 시스템에서 코드를 실행하는 경우입니다."},{"text":" ","type":"text"},{"type":"codeVoice","code":"any Error"},{"type":"text","text":" 또는 다른 박스형 프로토콜 타입의 인스턴스는"},{"text":" ","type":"text"},{"type":"text","text":"에러를 저장히기위해 런타임 때 메모리에 할당해야 합니다."},{"text":" ","type":"text"},{"text":"반대로,","type":"text"},{"text":" ","type":"text"},{"text":"특정 타입의 에러를 발생하려면","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift 는 에러에 대한 힙 할당을 피할 수 있습니다."}]}]},{"content":[{"inlineContent":[{"text":"에러가 라이브러리 처럼 일부 코드를 상세히 구현하고,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"인터페이스의 부분이 아닌 경우입니다."},{"type":"text","text":" "},{"type":"text","text":"에러는 라이브러리에서만 발생하고,"},{"text":" ","type":"text"},{"type":"text","text":"다른 의존성이나 라이브러리의 클라이언트에서 발생하지 않으므로,"},{"text":" ","type":"text"},{"type":"text","text":"가능한 모든 실패 목록을 만들 수 있습니다."},{"text":" ","type":"text"},{"type":"text","text":"그리고 에러는 라이브러리의 세부 구현내용이므로,"},{"type":"text","text":" "},{"text":"라이브러리 내에서 처리됩니다.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"코드에서 클로저 인수를 가지고"},{"type":"text","text":" "},{"text":"클로저로 부터 에러를 전파하는 함수와 같이","type":"text"},{"type":"text","text":" "},{"type":"text","text":"제너릭 파라미터에 의해 전파되는 에러의 경우입니다."},{"type":"text","text":" "},{"type":"text","text":"특정 에러 타입을 전파하는 것과"},{"type":"text","text":" "},{"code":"rethrows","type":"codeVoice"},{"text":" 를 사용하는 것에 대한 비교는","type":"text"},{"type":"text","text":" "},{"text":"doc:Declarations:다시-던지는-함수와-메서드-Rethrowing-Functions-and-Methods","type":"text"},{"text":" 를 참고 바랍니다.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"예를 들어,"},{"type":"text","text":" "},{"text":"평점을 요약하고","type":"text"},{"type":"text","text":" "},{"text":"다음의 에러 타입을 사용한다고 생각해 봅시다.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["enum StatisticsError: Error {","    case noRatings","    case invalidRating(Int)","}"]},{"inlineContent":[{"type":"text","text":"함수는 에러로 "},{"type":"codeVoice","code":"StatisticsError"},{"type":"text","text":" 값만 던지는 것을 지정하기 위해,"},{"type":"text","text":" "},{"text":"함수를 선언할 때","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"throws"},{"type":"text","text":" 대신에 "},{"code":"throws(StatisticsError)","type":"codeVoice"},{"type":"text","text":" 를 작성합니다."},{"text":" ","type":"text"},{"type":"text","text":"이 구문은 선언에서 "},{"type":"codeVoice","code":"throws"},{"type":"text","text":" 다음에 에러 타입을 작성하기 때문에"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"타입이 지정된 던기지 (typed throws)","type":"text"}]},{"type":"text","text":" 라고 부릅니다."},{"type":"text","text":" "},{"type":"text","text":"예를 들어,"},{"type":"text","text":" "},{"text":"아래의 함수는 에러로 ","type":"text"},{"type":"codeVoice","code":"StatisticsError"},{"type":"text","text":" 값을 던집니다."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func summarize(_ ratings: [Int]) throws(StatisticsError) {","    guard !ratings.isEmpty else { throw .noRatings }","","    var counts = [1: 0, 2: 0, 3: 0]","    for rating in ratings {","        guard rating > 0 && rating <= 3 else { throw .invalidRating(rating) }","        counts[rating]! += 1","    }","","    print(\"*\", counts[1]!, \"-- **\", counts[2]!, \"-- ***\", counts[3]!)","}"]},{"type":"paragraph","inlineContent":[{"text":"위 코드에서,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"summarize(_:)"},{"type":"text","text":" 함수는 1 에서 3을 나타내는"},{"text":" ","type":"text"},{"text":"평점의 목록을 요약합니다.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"이 함수는 입력이 올바르지 않으면 "},{"code":"StatisticsError","type":"codeVoice"},{"type":"text","text":" 의 인스턴스를 던집니다."},{"text":" ","type":"text"},{"text":"위 코드에서 함수의 에러 타입은 이미 정의되었으므로,","type":"text"},{"text":" ","type":"text"},{"text":"에러를 던질 때 타입을 생략합니다.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"이와 같이 함수에서 에러가 발생할면"},{"type":"text","text":" "},{"code":"throw StatisticsError.noRatings","type":"codeVoice"},{"text":" 로 작성하는 대신,","type":"text"},{"text":" ","type":"text"},{"code":"throw .noRatins","type":"codeVoice"},{"type":"text","text":" 로 짧게 작성할 수 있습니다."}]},{"type":"paragraph","inlineContent":[{"text":"함수의 시작 부분에 에러 타입을 지정해서 작성하면,","type":"text"},{"text":" ","type":"text"},{"text":"Swift 는 다른 에러 타입을 던지는지 확인합니다.","type":"text"},{"type":"text","text":" "},{"text":"예를 들어,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"이 챕터의 위 예제에서 "},{"type":"codeVoice","code":"summarize(_:)"},{"type":"text","text":" 함수에"},{"text":" ","type":"text"},{"type":"codeVoice","code":"VendingMachineError"},{"type":"text","text":" 를 사용하면,"},{"type":"text","text":" "},{"type":"text","text":"코드는 컴파일 때 에러가 발생합니다."}]},{"inlineContent":[{"type":"text","text":"일반적인 던지는 함수내에서"},{"text":" ","type":"text"},{"type":"text","text":"타입이 지정된 던지기를 사용하는 함수를 호출할 수 있습니다:"}],"type":"paragraph"},{"type":"codeListing","code":["func someThrowingFunction() -> throws {","    let ratings = [1, 2, 3, 2, 2, 1]","    try summarize(ratings)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"위 코드에서 ","type":"text"},{"type":"codeVoice","code":"someThrowingFunction()"},{"text":" 에서 에러 타입을 지정하지 않아,","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"any Error"},{"type":"text","text":" 를 던집니다."},{"type":"text","text":" "},{"type":"codeVoice","code":"throws(any Error)"},{"type":"text","text":" 로 명시적으로 에러 타입을 작성할 수도 있습니다;"},{"text":" ","type":"text"},{"text":"아래 코드는 위 코드와 동일합니다:","type":"text"}]},{"type":"codeListing","code":["func someThrowingFunction() -> throws(any Error) {","    let ratings = [1, 2, 3, 2, 2, 1]","    try summarize(ratings)","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"이 코드에서,"},{"type":"text","text":" "},{"type":"codeVoice","code":"someThrowingFunction()"},{"type":"text","text":" 은 "},{"code":"summarize(_:)","type":"codeVoice"},{"text":" 에서 던지는 모든 에러를 전파합니다.","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"summarize(_:)"},{"type":"text","text":" 에서 발생하는 에러는 "},{"type":"codeVoice","code":"StatisticsError"},{"type":"text","text":" 값이며,"},{"type":"text","text":" "},{"code":"someThrowingFunction()","type":"codeVoice"},{"text":" 에 유효한 에러입니다.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"code":"Never","type":"codeVoice"},{"type":"text","text":" 의 반환 타입으로 반환하지 않는 함수를 작성할 수 있는 것처럼,"},{"text":" ","type":"text"},{"type":"text","text":"절대 에러를 던지지 않는 "},{"code":"throws(Never)","type":"codeVoice"},{"type":"text","text":" 로 함수를 작성할 수 있습니다:"}],"type":"paragraph"},{"code":["func nonThrowingFunction() throws(Never) {","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 함수는 던지기 위해 "},{"type":"codeVoice","code":"Never"},{"type":"text","text":" 타입의 값을 생성할 수 없으므로,"},{"type":"text","text":" "},{"text":"에러를 던질 수 없습니다.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"함수의 에러 타입을 지정하는 것 외에도,","type":"text"},{"text":" ","type":"text"},{"code":"do","type":"codeVoice"},{"text":"-","type":"text"},{"type":"codeVoice","code":"catch"},{"text":" 구문에 에러 타입을 지정하여 작성할 수도 있습니다.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"예를 들어:"}]},{"code":["let ratings = []","do throws(StatisticsError) {","    try summarize(ratings)","} catch {","    switch error {","    case .noRatings:","        print(\"No ratings available\")","    case .invalidRating(let rating):","        print(\"Invalid rating: \\(rating)\")","    }","}","\/\/ Prints \"No ratings available\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 코드에서,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"do throws(StatisticsError)"},{"type":"text","text":" 를 작성하는 것은"},{"text":" ","type":"text"},{"code":"do","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"catch"},{"text":" 구문에서 에러로 ","type":"text"},{"type":"codeVoice","code":"StatisticsError"},{"type":"text","text":" 값을 발생합니다."},{"type":"text","text":" "},{"text":"다른 ","type":"text"},{"type":"codeVoice","code":"do"},{"type":"text","text":"-"},{"code":"catch","type":"codeVoice"},{"text":" 구문과 같이,","type":"text"},{"text":" ","type":"text"},{"code":"catch","type":"codeVoice"},{"text":" 구문은 가능한 모든 에러를 처리하거나","type":"text"},{"text":" ","type":"text"},{"text":"주변에 처리되지 않은 에러에 대해 전파합니다.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"이 코드는 "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" 구문을 사용하여"},{"text":" ","type":"text"},{"type":"text","text":"모든 에러를 처리합니다."},{"text":" ","type":"text"},{"type":"text","text":"패턴을 가지지 않는 다른 "},{"code":"catch","type":"codeVoice"},{"type":"text","text":" 구문과 같이"},{"type":"text","text":" "},{"type":"text","text":"이 구문은 모든 에러와 일치시키고"},{"text":" ","type":"text"},{"type":"codeVoice","code":"error"},{"type":"text","text":" 라는 이름의 지역 상수에 바인딩 합니다."},{"type":"text","text":" "},{"type":"codeVoice","code":"do"},{"text":"-","type":"text"},{"code":"catch","type":"codeVoice"},{"type":"text","text":" 구문은 "},{"type":"codeVoice","code":"StatisticsError"},{"type":"text","text":" 값을 던지므로,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"error"},{"type":"text","text":" 는 "},{"type":"codeVoice","code":"StatisticsError"},{"type":"text","text":" 타입의 값입니다."}]},{"type":"paragraph","inlineContent":[{"text":"위의 ","type":"text"},{"type":"codeVoice","code":"catch"},{"text":" 구문은 가능한 에러를 일치시키고 처리하기 위해","type":"text"},{"text":" ","type":"text"},{"code":"switch","type":"codeVoice"},{"type":"text","text":" 구문을 사용합니다."},{"type":"text","text":" "},{"type":"text","text":"에러 처리 코드없이 "},{"type":"codeVoice","code":"StatisticsError"},{"text":" 에 새로운 케이스를 추가하면,","type":"text"},{"type":"text","text":" "},{"text":"Swift 는 ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" 구문이 완전하기 않기 때문에","type":"text"},{"type":"text","text":" "},{"text":"에러가 발생합니다.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"자체 에러를 모두 처리하는 라이브러리의 경우에,"},{"type":"text","text":" "},{"text":"이러한 접근방식을 사용하여 새로운 에러를 처리하기 위한","type":"text"},{"type":"text","text":" "},{"text":"새로운 코드를 가져오도록 할 수 있습니다.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"함수 또는 ","type":"text"},{"type":"codeVoice","code":"do"},{"text":" 블럭에서 하나의 타입으로 에러를 던지면,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift 는 타입이 지정된 던지기를 사용하는 코드라고 추론합니다."},{"text":" ","type":"text"},{"type":"text","text":"이 짧은 구문을 사용하면,"},{"type":"text","text":" "},{"text":"위 예제에서 ","type":"text"},{"type":"codeVoice","code":"do"},{"type":"text","text":"-"},{"type":"codeVoice","code":"catch"},{"text":" 를 아래와 같이 작성할 수 있습니다:","type":"text"}]},{"code":["let ratings = []","do {","    try summarize(ratings)","} catch {","    switch error {","    case .noRatings:","        print(\"No ratings available\")","    case .invalidRating(let rating):","        print(\"Invalid rating: \\(rating)\")","    }","}","\/\/ Prints \"No ratings available\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"위 "},{"code":"do","type":"codeVoice"},{"text":"-","type":"text"},{"type":"codeVoice","code":"catch"},{"text":" 블럭에서 에러 타입을 지정하지 않지만,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift 는 "},{"code":"StatisticsError","type":"codeVoice"},{"text":" 를 던진다고 추론합니다.","type":"text"},{"type":"text","text":" "},{"text":"Swift 가 타입이 지정된 던지기로 추론하는 것을 방지하기 위해","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"throws(any Error)"},{"type":"text","text":" 를 명시적으로 작성할 수 있습니다."}]},{"text":"정리 작업 지정 (Specifying Cleanup Actions)","anchor":"%EC%A0%95%EB%A6%AC-%EC%9E%91%EC%97%85-%EC%A7%80%EC%A0%95-Specifying-Cleanup-Actions","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"코드의 현재 블럭이 종료되기 직전에 어떠한 작업을 수행하려면 "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" 구문을 사용합니다. 이 구문을 사용하여 에러가 발생하여 종료되거나 "},{"type":"codeVoice","code":"return"},{"type":"text","text":" 또는 "},{"code":"break","type":"codeVoice"},{"text":" 와 같은 구문에 의해 종료되는 방식에 상관없이 필요한 정리를 수행할 수 있습니다. 예를 들어 ","type":"text"},{"type":"codeVoice","code":"defer"},{"text":" 구문을 사용하여 파일 설명자가 닫히고 수동으로 할당된 메모리가 해제되도록 할 수 있습니다.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"defer"},{"type":"text","text":" 구문은 현재 범위가 종료될 때까지 실행을 연기합니다. 이 구문은 "},{"code":"defer","type":"codeVoice"},{"type":"text","text":" 키워드와 나중에 실행될 구문으로 구성되어 있습니다. 지연된 구문은 "},{"type":"codeVoice","code":"break"},{"type":"text","text":" 또는 "},{"type":"codeVoice","code":"return"},{"text":" 구문과 같이 구문의 밖으로 제어를 이동하거나 에러를 발생시키는 코드를 포함할 수 없습니다. 지연된 동작은 소스 코드에 작성된 순서와 반대로 실행됩니다. 즉 첫번째 ","type":"text"},{"type":"codeVoice","code":"defer"},{"type":"text","text":" 구문의 코드는 마지막에 실행되고 두번째 "},{"type":"codeVoice","code":"defer"},{"text":" 구문의 코드는 마지막에서 두번째로 실행되는 식입니다. 소스 코드의 마지막 ","type":"text"},{"code":"defer","type":"codeVoice"},{"text":" 구문은 마지막에 실행합니다.","type":"text"}]},{"syntax":"swift","code":["func processFile(filename: String) throws {","    if exists(filename) {","        let file = open(filename)","        defer {","            close(file)","        }","        while let line = try file.readline() {","            \/\/ Work with the file.","        }","        \/\/ close(file) is called here, at the end of the scope.","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"위의 예제는 ","type":"text"},{"code":"open(_:)","type":"codeVoice"},{"type":"text","text":" 함수에 "},{"code":"close(_:)","type":"codeVoice"},{"text":" 에 대한 호출이 있는지 확인하기 위해 ","type":"text"},{"type":"codeVoice","code":"defer"},{"text":" 구문을 사용합니다.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"에러 처리 코드가 포함되어 있지 않아도 "},{"type":"codeVoice","code":"defer"},{"text":" 구문을 사용할 수 있습니다.","type":"text"},{"text":" ","type":"text"},{"text":"더 자세한 내용은 ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tsplk\/documentation\/The-Swift-Programming-Language-Korean\/ControlFlow#%EC%97%B0%EA%B8%B0%EB%90%9C-%EB%8F%99%EC%9E%91-Deferred-Actions","isActive":true},{"text":" 을 참고 바랍니다.","type":"text"}]}]}],"references":{"https://developer.apple.com/documentation/swift/cocoa_design_patterns/handling_cocoa_errors_in_swift":{"title":"Swift에서 Cocoa 에러 처리 (Handling Cocoa Errors in Swift)","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/cocoa_design_patterns\/handling_cocoa_errors_in_swift","titleInlineContent":[{"type":"text","text":"Swift에서 Cocoa 에러 처리 (Handling Cocoa Errors in Swift)"}],"type":"link","url":"https:\/\/developer.apple.com\/documentation\/swift\/cocoa_design_patterns\/handling_cocoa_errors_in_swift"},"doc://org.swift.tsplk/documentation/The-Swift-Programming-Language-Korean/ControlFlow#%EC%97%B0%EA%B8%B0%EB%90%9C-%EB%8F%99%EC%9E%91-Deferred-Actions":{"kind":"section","abstract":[],"title":"연기된 동작 (Deferred Actions)","identifier":"doc:\/\/org.swift.tsplk\/documentation\/The-Swift-Programming-Language-Korean\/ControlFlow#%EC%97%B0%EA%B8%B0%EB%90%9C-%EB%8F%99%EC%9E%91-Deferred-Actions","url":"\/documentation\/the-swift-programming-language-korean\/controlflow#%EC%97%B0%EA%B8%B0%EB%90%9C-%EB%8F%99%EC%9E%91-Deferred-Actions","type":"topic"},"doc://org.swift.tsplk/documentation/The-Swift-Programming-Language-Korean/Patterns":{"role":"article","type":"topic","url":"\/documentation\/the-swift-programming-language-korean\/patterns","title":"패턴 (Patterns)","kind":"article","identifier":"doc:\/\/org.swift.tsplk\/documentation\/The-Swift-Programming-Language-Korean\/Patterns","abstract":[{"text":"값을 일치시키고 분리합니다.","type":"text"}]},"doc://org.swift.tsplk/documentation/TSPLK":{"url":"\/documentation\/tsplk","identifier":"doc:\/\/org.swift.tsplk\/documentation\/TSPLK","type":"topic","kind":"article","role":"collection","title":"The Swift Programming Language (6) (한국어)","abstract":[]}}}