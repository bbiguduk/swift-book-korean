{"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/org.swift.tsplk\/documentation\/The-Swift-Programming-Language-Korean\/NestedTypes","interfaceLanguage":"swift"},"kind":"article","metadata":{"role":"article","title":"중첩 타입 (Nested Types)"},"hierarchy":{"paths":[["doc:\/\/org.swift.tsplk\/documentation\/TSPLK"]]},"sections":[],"primaryContentSections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"열거형은 특정 클래스나 구조체의 기능을 지원하기 위해 생성합니다."},{"type":"text","text":" "},{"type":"text","text":"유사하게 더 복잡한 타입의 컨텍스트 내에서 사용하기 위해"},{"type":"text","text":" "},{"type":"text","text":"유틸리티 구조체와 일반적으로 특정 타입과 함께 사용되는 프로토콜을"},{"type":"text","text":" "},{"type":"text","text":"정의하는 것이 편리할 수 있습니다."},{"type":"text","text":" "},{"type":"text","text":"이를 위해 Swift는 *중첩 타입(nested types)*을 정의할 수 있으며,"},{"type":"text","text":" "},{"type":"text","text":"지원하는 타입의 정의 내에서"},{"type":"text","text":" "},{"type":"text","text":"열거형, 구조체, 프로토콜과 같은 타입을 중첩할 수 있습니다."}]},{"type":"paragraph","inlineContent":[{"text":"다른 타입 내에서 타입을 중첩하려면","type":"text"},{"text":" ","type":"text"},{"text":"지원하는 타입의 외부 중괄호 내에 정의를 작성해야 합니다.","type":"text"},{"text":" ","type":"text"},{"text":"타입은 필요에 따라 원하는 만큼 여러 단계로 중첩할 수 있습니다.","type":"text"}]},{"type":"heading","level":2,"text":"중첩 타입의 동작 (Nested Types in Action)","anchor":"%EC%A4%91%EC%B2%A9-%ED%83%80%EC%9E%85%EC%9D%98-%EB%8F%99%EC%9E%91-Nested-Types-in-Action"},{"type":"paragraph","inlineContent":[{"type":"text","text":"아래의 예시는 블랙잭 게임에서 사용되는 카드 게임을 모델링하는"},{"type":"text","text":" "},{"type":"codeVoice","code":"BlackjackCard"},{"type":"text","text":"라는 구조체를 정의합니다."},{"type":"text","text":" "},{"type":"codeVoice","code":"BlackjackCard"},{"type":"text","text":" 구조체는 "},{"type":"codeVoice","code":"Suit"},{"type":"text","text":"와 "},{"type":"codeVoice","code":"Rank"},{"type":"text","text":"라는"},{"type":"text","text":" "},{"type":"text","text":"두 중첩된 열거형을 포함합니다."}]},{"type":"paragraph","inlineContent":[{"text":"블랙잭에서 에이스 카드의 값은 1이나 11입니다.","type":"text"},{"text":" ","type":"text"},{"text":"이러한 특징은 ","type":"text"},{"code":"Rank","type":"codeVoice"},{"text":" 열거형 내에 중첩된","type":"text"},{"text":" ","type":"text"},{"code":"Values","type":"codeVoice"},{"text":"라는 구조체로 나타냅니다:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct BlackjackCard {","","    \/\/ nested Suit enumeration","    enum Suit: Character {","        case spades = \"♠\", hearts = \"♡\", diamonds = \"♢\", clubs = \"♣\"","    }","","    \/\/ nested Rank enumeration","    enum Rank: Int {","        case two = 2, three, four, five, six, seven, eight, nine, ten","        case jack, queen, king, ace","        struct Values {","            let first: Int, second: Int?","        }","        var values: Values {","            switch self {","            case .ace:","                return Values(first: 1, second: 11)","            case .jack, .queen, .king:","                return Values(first: 10, second: nil)","            default:","                return Values(first: self.rawValue, second: nil)","            }","        }","    }","","    \/\/ BlackjackCard properties and methods","    let rank: Rank, suit: Suit","    var description: String {","        var output = \"suit is \\(suit.rawValue),\"","        output += \" value is \\(rank.values.first)\"","        if let second = rank.values.second {","            output += \" or \\(second)\"","        }","        return output","    }","}"]},{"type":"paragraph","inlineContent":[{"code":"Suit","type":"codeVoice"},{"type":"text","text":" 열거형은 기호를 나타내기 위해 "},{"code":"Character","type":"codeVoice"},{"type":"text","text":" 타입을 원시값으로"},{"type":"text","text":" "},{"type":"text","text":"네 가지 일반적인 카드 모양을 나타냅니다."}]},{"type":"paragraph","inlineContent":[{"code":"Rank","type":"codeVoice"},{"text":" 열거형은 카드 값을 나타내기 위해 ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" 타입을 원시값으로","type":"text"},{"text":" ","type":"text"},{"text":"가능한 13가지 카드 순위를 나타냅니다.","type":"text"},{"text":" ","type":"text"},{"text":"(이 ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" 타입의 원시값은 Jack, Queen, King, Ace 카드에는 사용되지 않습니다.)","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"위에서 말했듯이 ","type":"text"},{"type":"codeVoice","code":"Rank"},{"text":" 열거형은","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Values"},{"text":"라는 자신의 중첩된 구조체를 더 정의합니다.","type":"text"},{"text":" ","type":"text"},{"text":"이 구조체는 대부분의 카드는 하나의 값을 가지지만","type":"text"},{"text":" ","type":"text"},{"text":"에이스 카드는 두 값을 가지는 사실을 캡슐화합니다.","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Values"},{"text":" 구조체는 다음과 같이 두 프로퍼티를 정의합니다:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"Int"},{"text":" 타입의 ","type":"text"},{"type":"codeVoice","code":"first"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Int?","type":"codeVoice"},{"type":"text","text":"나 “옵셔널 "},{"code":"Int","type":"codeVoice"},{"type":"text","text":"” 타입의 "},{"code":"second","type":"codeVoice"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Rank"},{"type":"text","text":"는 "},{"type":"codeVoice","code":"Values"},{"type":"text","text":" 구조체의 인스턴스를 반환하는"},{"type":"text","text":" "},{"type":"codeVoice","code":"values"},{"type":"text","text":"라는 연산 프로퍼티도 정의합니다."},{"type":"text","text":" "},{"type":"text","text":"이 연산 프로퍼티는 카드의 순위를 고려하고"},{"type":"text","text":" "},{"type":"text","text":"그 순위를 기반으로 적절한 값으로 새로운 "},{"type":"codeVoice","code":"Values"},{"type":"text","text":" 인스턴스를 초기화합니다."},{"type":"text","text":" "},{"type":"codeVoice","code":"jack"},{"type":"text","text":", "},{"type":"codeVoice","code":"queen"},{"type":"text","text":", "},{"type":"codeVoice","code":"king"},{"type":"text","text":", "},{"type":"codeVoice","code":"ace"},{"type":"text","text":"에 대한 특별한 값을 사용합니다."},{"type":"text","text":" "},{"type":"text","text":"숫자 카드에 대해서는 순위의 "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" 타입의 원시값을 사용합니다."}]},{"inlineContent":[{"type":"codeVoice","code":"BlackjackCard"},{"type":"text","text":" 구조체는 "},{"type":"codeVoice","code":"rank"},{"type":"text","text":"와 "},{"type":"codeVoice","code":"suit"},{"type":"text","text":"의 두 프로퍼티를 가지고 있습니다."},{"type":"text","text":" "},{"type":"text","text":"이름과 카드의 값 설명을 만들기 위해"},{"type":"text","text":" "},{"type":"codeVoice","code":"rank"},{"type":"text","text":"와 "},{"type":"codeVoice","code":"suit"},{"text":"에 저장된 값을 사용하는","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"description"},{"text":"이라는 연산 프로퍼티도 정의합니다.","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"description"},{"text":" 프로퍼티는 화면에 표시하기 위해","type":"text"},{"text":" ","type":"text"},{"text":"두 번째 값이 있는지 확인하고 있으면,","type":"text"},{"text":" ","type":"text"},{"text":"두 번째 값에 대해 상세 설명을 추가합니다.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"BlackjackCard"},{"type":"text","text":"는 커스텀 이니셜라이저가 없는 구조체이기 때문에,"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/org.swift.tsplk\/documentation\/The-Swift-Programming-Language-Korean\/Initialization#%EA%B5%AC%EC%A1%B0%EC%B2%B4-%ED%83%80%EC%9E%85%EC%9D%98-%EB%A9%A4%EB%B2%84%EC%99%80%EC%9D%B4%EC%A6%88-%EC%9D%B4%EB%8B%88%EC%85%9C%EB%9D%BC%EC%9D%B4%EC%A0%80-Memberwise-Initializers-for-Structure-Types","isActive":true},{"type":"text","text":"에서 설명했듯이"},{"type":"text","text":" "},{"type":"text","text":"암시적 멤버별 이니셜라이저를 가지고 있습니다."},{"type":"text","text":" "},{"type":"codeVoice","code":"theAceOfSpades"},{"type":"text","text":"라는 새로운 상수를 초기화하기 위해 이니셜라이저를 사용할 수 있습니다:"}],"type":"paragraph"},{"syntax":"swift","code":["let theAceOfSpades = BlackjackCard(rank: .ace, suit: .spades)","print(\"theAceOfSpades: \\(theAceOfSpades.description)\")","\/\/ Prints \"theAceOfSpades: suit is ♠, value is 1 or 11\""],"type":"codeListing"},{"inlineContent":[{"code":"Rank","type":"codeVoice"},{"text":"와 ","type":"text"},{"code":"Suit","type":"codeVoice"},{"text":"는 ","type":"text"},{"code":"BlackjackCard","type":"codeVoice"},{"text":" 내에 중첩되어 있지만,","type":"text"},{"text":" ","type":"text"},{"text":"타입은 컨텍스트로부터 유추될 수 있기 때문에","type":"text"},{"text":" ","type":"text"},{"text":"이 인스턴스의 초기화는 케이스 이름(","type":"text"},{"code":".ace","type":"codeVoice"},{"text":"와 ","type":"text"},{"code":".spades","type":"codeVoice"},{"text":")만으로","type":"text"},{"text":" ","type":"text"},{"text":"열거형 케이스를 참조할 수 있습니다.","type":"text"},{"text":" ","type":"text"},{"text":"위의 예시에서 ","type":"text"},{"code":"description","type":"codeVoice"},{"text":" 프로퍼티는","type":"text"},{"text":" ","type":"text"},{"text":"스페이드의 에이스는 ","type":"text"},{"code":"1","type":"codeVoice"},{"text":"이나 ","type":"text"},{"code":"11","type":"codeVoice"},{"text":"의 값을 가지고 있다고 올바르게 보여줍니다.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"%EC%A4%91%EC%B2%A9-%ED%83%80%EC%9E%85-%EC%B0%B8%EC%A1%B0-Referring-to-Nested-Types","text":"중첩 타입 참조 (Referring to Nested Types)","type":"heading"},{"inlineContent":[{"text":"중첩 타입을 그 정의된 범위 밖에서 사용하려면","type":"text"},{"text":" ","type":"text"},{"text":"그 타입이 중첩ㅚㄴ 외부 타입의 이름을 접두사로 붙여야 합니다:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let heartsSymbol = BlackjackCard.Suit.hearts.rawValue","\/\/ heartsSymbol is \"♡\""],"type":"codeListing"},{"inlineContent":[{"text":"위의 예시에서","type":"text"},{"text":" ","type":"text"},{"code":"Suit","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Rank","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Values","type":"codeVoice"},{"text":"의 이름은 정의된 컨텍스트에 따라 자연스럽게 규정되기 때문에","type":"text"},{"text":" ","type":"text"},{"text":"이름을 의도적으로 짧게 유지할 수 있습니다.","type":"text"}],"type":"paragraph"},{"style":"note","name":"Beta Software","type":"aside","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software."}],"type":"paragraph"},{"inlineContent":[{"text":"Learn more about using ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/support\/beta-software\/","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]}],"kind":"content"}],"abstract":[{"type":"text","text":"타입의 범위 내에 다른 타입을 정의합니다."}],"references":{"doc://org.swift.tsplk/documentation/TSPLK":{"title":"The Swift Programming Language (6.2 Beta) (한국어)","abstract":[],"kind":"article","type":"topic","identifier":"doc:\/\/org.swift.tsplk\/documentation\/TSPLK","url":"\/documentation\/tsplk","role":"collection"},"https://developer.apple.com/support/beta-software/":{"identifier":"https:\/\/developer.apple.com\/support\/beta-software\/","type":"link","title":"Apple’s beta software","titleInlineContent":[{"type":"text","text":"Apple’s beta software"}],"url":"https:\/\/developer.apple.com\/support\/beta-software\/"},"doc://org.swift.tsplk/documentation/The-Swift-Programming-Language-Korean/Initialization#%EA%B5%AC%EC%A1%B0%EC%B2%B4-%ED%83%80%EC%9E%85%EC%9D%98-%EB%A9%A4%EB%B2%84%EC%99%80%EC%9D%B4%EC%A6%88-%EC%9D%B4%EB%8B%88%EC%85%9C%EB%9D%BC%EC%9D%B4%EC%A0%80-Memberwise-Initializers-for-Structure-Types":{"abstract":[],"identifier":"doc:\/\/org.swift.tsplk\/documentation\/The-Swift-Programming-Language-Korean\/Initialization#%EA%B5%AC%EC%A1%B0%EC%B2%B4-%ED%83%80%EC%9E%85%EC%9D%98-%EB%A9%A4%EB%B2%84%EC%99%80%EC%9D%B4%EC%A6%88-%EC%9D%B4%EB%8B%88%EC%85%9C%EB%9D%BC%EC%9D%B4%EC%A0%80-Memberwise-Initializers-for-Structure-Types","title":"구조체 타입의 멤버와이즈 이니셜라이저 (Memberwise Initializers for Structure Types)","kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language-korean\/initialization#%EA%B5%AC%EC%A1%B0%EC%B2%B4-%ED%83%80%EC%9E%85%EC%9D%98-%EB%A9%A4%EB%B2%84%EC%99%80%EC%9D%B4%EC%A6%88-%EC%9D%B4%EB%8B%88%EC%85%9C%EB%9D%BC%EC%9D%B4%EC%A0%80-Memberwise-Initializers-for-Structure-Types"}}}